/*
 * This file is part of kaijs

 * Copyright (c) 2021, 2022 Andrei Stepanov <astepano@redhat.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import Joi from 'joi';
import { ObjectId } from 'mongodb';

/**
 * All artifacts are uniquelly identified by
 *
 * * artifact-type : string
 * * artifact-id : string
 *
 * List here all possible artifact-types:
 *
 * https://pagure.io/greenwave/blob/master/f/conf/subject_types
 * https://gitlab.cee.redhat.com/gating/greenwave-playbooks/-/blob/master/roles/greenwave/files/subject_types.yaml
 */
export type ArtifactTypes =
  /**
   * Builds from https://koji.fedoraproject.org/
   */
  | 'koji-build'
  /**
   * Builds from https://copr.fedorainfracloud.org/
   */
  | 'copr-build'
  /**
   * Builds from https://brewweb.engineering.redhat.com/
   */
  | 'brew-build'
  /**
   * PR from https://src.osci.redhat.com/
   */
  | 'dist-git-pr'
  /**
   * MBS builds from https://mbs.engineering.redhat.com/
   */
  | 'redhat-module'
  | 'fedora-module'
  /**
   * Composes produced by http://odcs.engineering.redhat.com/
   */
  | 'productmd-compose'
  /**
   * Builds from https://kojihub.stream.centos.org/koji/
   */
  | 'koji-build-cs';

export const atype_to_hub_map = {
  'koji-build': 'fedoraproject',
  'koji-build-cs': 'centos-stream',
};

export interface KaiState {
  /**
   * thread_id is copied thread_id from message or generated by KAI.
   */
  thread_id: string;
  /**
   * message_id is copied from message.
   * Used by KAI to check if this message already present in DB.
   * Mongodb has index for this field.
   */
  msg_id: string;
  /**
   * Version of schema broker message complays to.
   */
  version: string;
  /**
   * stage can be: 'build', 'dispatch', 'test', 'promote', etc....
   * derived from topic
   * stage (in standard called as `event`) is always the second item from the end of the topic
   * Examples:
   *
   * * pull-request.test.error -> test
   * * brew-build.promote.error -> promote
   **/
  stage: string;
  /**
   * state is always the latest part of the message
   * Examples:
   *
   *  * brew-build.promote.error -> error
   *  * brew-build.test.complete -> complete
   */
  state: string;
  /**
   * Derived from: generated_at
   * Example: 1616361381
   */
  timestamp: number;
  /**
   * processed
   */
  processed?: boolean;
  /**
   * origin
   */
  origin: {
    /**
     * Converted from pipeline message
     */
    creator: string;
    /**
     * kai
     */
    reason: string;
  };
  /**
   * Create, if possible, test case name.
   * The same name will have resultsdb:
   * https://pagure.io/fedora-ci/messages/blob/master/f/mappings/results/brew-build.test.complete.yaml#_5
   *
   *    name: "${body.test.namespace}.${body.test.type}.${body.test.category}"
   *
   * https://pagure.io/fedora-ci/messages/blob/master/f/schemas/test-common.yaml#_52
   *
   */
  test_case_name?: string;
}

/**
 * Artifact state - this is any kind of message, plus fields added during store phase
 */
export interface ArtifactState {
  /**
   * Block present for any kind of messages.
   */
  kai_state: KaiState;
  broker_msg_body: any;
}

export interface PayloadBrewBuild {
  /** 0ad-0.0.23b-13.fc33 */
  nvr: string;
  /** owner of the build */
  issuer: string;
  /** name from nvr */
  component: string;
  /** true or false or */
  scratch: boolean;
  /**
   * Gating tag. Example: rhel-8.1.0-gate
   */
  gate_tag_name?: string;
  /**
   * git://pkgs.devel.redhat.com/rpms/navilu-fonts?#937e7b088e82736a62d0b21cbb0f2e1299400b2e
   */
  source: string;
  task_id: number;
  build_id?: number;
}

export interface PayloadMBSRH {
  mbs_id: number;
  nvr: string;
  issuer: string;
  nsvc: string;
  name: string;
  stream: string;
  version: string;
  context: string;
  gate_tag_name?: string;
}

export interface PayloadKojiBuild
  extends Omit<PayloadBrewBuild, 'gate_tag_name'> {}

export interface PayloadMBSFedora extends Omit<PayloadMBSRH, 'gate_tag_name'> {}

export type TPayload =
  | PayloadKojiBuild
  | PayloadBrewBuild
  | PayloadMBSRH
  | PayloadMBSFedora;

export interface PayloadRedHatModule {
  /** name from nsvc */
  name: string;
  /** stream from nsvc */
  stream: string;
  /** version from nsvc */
  version: string;
  /** context from nsvc */
  context: string;
  /** n:s:v:c */
  nsvc: string;
}
export interface PayloadDistGitPR {
  uid: string;
  repository: string;
  comment_id: string;
  commit_hash: string;
  issuer: string;
}
export interface PayloadPoductMDCompose {
  /** nightly */
  compose_type: string;
}

export interface ArtifactModel {
  _id: ObjectId;
  /**
   * Common for all artifact types
   */
  /**
   * Reqiured. MongoDB provides no out-of-the-box concurrency controls. For supporting concurrency is using a document version number.
   */
  _version: number;
  /** Updated at: iso 8601 string. */
  _updated: string;
  /** Required. RHEL-7.7-20190214.n.0 */
  aid: string;
  /** Required. copr-build */
  type: string;
  payload:
    | PayloadBrewBuild
    | PayloadKojiBuild
    | PayloadDistGitPR
    | PayloadRedHatModule
    | PayloadPoductMDCompose;
  states: ArtifactState[];
  facets: {
    /** https://www.mongodb.com/blog/post/faceted-search-with-mongodb */
    resultsdb_testcase?: Array<string>;
  };
}

export interface ValidationErrorsModel {
  _id?: ObjectId;
  /** Time stamp */
  timestamp: number;
  /** A string representing the time portion of the given date in human readable form in English. */
  time: string;
  /** Error message */
  errmsg: Joi.ValidationErrorItem[] | string;
  /** Message from broker */
  broker_msg: any;
  /** Broker topic */
  broker_topic: string;
  /** Broker message id */
  broker_msg_id: string;
  /** When the mongodb-document will be auto-removed */
  expire_at: Date;
}

export interface UnknownBrokerTopicModel {
  _id?: ObjectId;
  /** Time stamp */
  timestamp: number;
  /** A string representing the time portion of the given date in human readable form in English. */
  time: string;
  /** Broker topic that doesn't have associated handler */
  broker_topic: string;
  /** Message from broker */
  broker_msg: any;
  /** When the mongodb-document will be auto-removed */
  expire_at: Date;
}
